class SGTree{
    public:
    vector<int> seg;
    vector<int> lazy;
    SGTree(int n)
    {
        seg.resize(4*n);
        lazy.resize(4*n);
    }

    void build(int ind, int low, int high, vector<int> &v1)
    {
        if(low==high)
        {
            seg[ind] = v1[low]; 
            return;    
        }

        int mid = (low+high)>>1;
        build(2*ind+1, low, mid, v1);
        build(2*ind+2, mid+1, high, v1);

        seg[ind] = (seg[2*ind+1]+seg[2*ind+2]); 
    }


    void update(int ind, int low, int high, int l, int r, int val)
    {
        if(lazy[ind]!=0)
        {
            seg[ind] += (high-low+1)*lazy[ind];

            if(low!=high)
            {
                lazy[2*ind+1] += lazy[ind];
                lazy[2*ind+2] += lazy[ind];
            }
            lazy[ind] = 0;
        }


        if(high<l || r<low)
        {
            return;
        }
        else if(low>=l && high<=r)
        {
            seg[ind] += (high-low+1)*val;

            if(low!=high)
            {
                lazy[2*ind+1] += val;
                lazy[2*ind+2] += val;
            }
            return;
        }
        else
        {
            int mid = (low+high)>>1;
            update(2*ind+1, low, mid, l, r, val);
            update(2*ind+2, mid+1, high, l, r, val);
            seg[ind] = seg[2*ind+1] + seg[2*ind+2];
        }
    }

    int query(int ind, int low, int high, int l, int r)
    {
        if(lazy[ind]!=0)
        {
            seg[ind] += (high-low+1)*lazy[ind];

            if(low!=high)
            {
                lazy[2*ind+1] += lazy[ind];
                lazy[2*ind+2] += lazy[ind];
            }
            lazy[ind] = 0;
        }

        if(r<low || l>high)
        {
            return 0; 
        }
        else if(l<=low && r>=high)
        {
            return seg[ind]; 
        }
        else
        {
            int mid = (low+high)>>1; 
            int left = query(2*ind+1, low, mid, l, r);
            int right = query(2*ind+2, mid+1, high, l, r);
            return min(left, right);
            return (left+right);

        } 
    }
};
int main()
{
    int n;
    cin >> n;

    vector<int> v1;
    for(int i=0; i<n; i++)
    {
        int x;
        cin >> x;
        v1.push_back(x);
    }

    SGTree sg(n);

    sg.build(0, 0, n-1, v1);

    int q;
    cin >> q;

    while(q--)
    {
        int type;
        cin >> type;

        if(type==1)
        {
            int l, r;
            cin >> l >> r;
            cout << sg.query(0, 0, n-1, l, r) << endl;
        }
        else
        {
            int l, r, val;
            cin >> l >> r >> val;
            sg.update(0, 0, n-1, l, r, val);
        }
    }
}
