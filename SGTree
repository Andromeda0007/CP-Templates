class SGTree{
    public:
    vector<int> seg;

    SGTree(int n)
    {
        seg.resize(4*n+1);
    }

    void build(int ind, int low, int high, vector<int> &v1)
    {
        if(low==high)
        {
            seg[ind] = v1[low]; 
            return;    
        }

        int mid = (low+high)/2;
        build(2*ind+1, low, mid, v1);
        build(2*ind+2, mid+1, high, v1);

        seg[ind] = min(seg[2*ind+1], seg[2*ind+2]); 
    }


    int query(int ind, int low, int high, int l, int r)
    {
        if(r<low || l>high)
        {
            return INT_MAX; 
        }
        else if(l<=low && r>=high)
        {
            return seg[ind]; 
        }
        else
        {
            int mid = (low+high)/2; 
            int left = query(2*ind+1, low, mid, l, r);
            int right = query(2*ind+2, mid+1, high, l, r);
            return min(left, right);
        } 
    }

    
    void update(int ind, int low, int high, int pos, int val)
    {
        if(low==high)
        {
            seg[ind] = val;
            return;
        }

        int mid = (low+high)/2;
        if(pos<=mid)
        {
            update(2*ind+1, low, mid, pos, val);
        }
        else
        {
            update(2*ind+2, mid+1, high, pos, val);
        }
    }
};
